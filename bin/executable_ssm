#!/bin/sh

set -e

usage() {
  echo "Usage: $0 [-L <localport:hostport>] [instance-id]" 1>&2;
  exit 1
}

## Validate requirements
command -v aws >/dev/null 2>&1 || { echo 'You need to install "aws-cli" to use this functionality'; exit 1; }

PORTFORWARD=0

## Parse input arguments
while getopts ":L:" opt; do
  case $opt in
    L) PORTFORWARD=1
       LOCALPORT=$(echo $OPTARG | cut -d: -f1)
       HOSTPORT=$(echo $OPTARG | cut -d: -f2)
       ;;
    *)
      usage
      ;;
  esac
done

shift $((OPTIND-1))

## Main logic
if [ "$#" -eq 0 ]; then
  ## Validate requirements
  command -v jq >/dev/null 2>&1 || { echo 'You need to install "jq" to use this functionality'; exit 1; }
  command -v dialog >/dev/null 2>&1 || { echo 'You need to install "dialog" to use this functionality'; exit 1; }

  ## Retrieve all EC2 instances
  LIST=$(aws ec2 describe-instances \
    --output json \
    --filters Name=tag-key,Values=Name \
    --filters Name=instance-state-name,Values=running \
    --query 'Reservations[*].Instances[*].{NAME:Tags[?Key==`Name`]|[0].Value,ID:InstanceId}' | \
    jq -r 'sort_by(.[].NAME) | .[] | .[] | .ID, .NAME')

  ## Exit when aws command fails or there are no running instances
  [ $(echo -n "$LIST" | wc -l) -eq 0 ] && exit 1

  ## Let the user select an instance
  INSTANCEID=$(dialog \
    --backtitle "EC2 Instances" \
    --title "Menu" \
    --clear \
    --cancel-label "Exit" \
    --menu "Please select:" 50 80 4 \
    $LIST 3>&1 1>&2 2>&3 3>&-)

  [ "$?" -gt 0 ] && clear && exit 1

  clear
elif [ "$#" -eq 1 ]; then
  INSTANCEID=$1
else
  usage
fi

## Connect to an instancd
echo "Connecting to $INSTANCEID"
if [ "$PORTFORWARD" -eq 1 ]; then
  aws ssm start-session --target $INSTANCEID --document-name AWS-StartPortForwardingSession --parameters '{"portNumber":["'"${HOSTPORT}"'"], "localPortNumber":["'"${LOCALPORT}"'"]}'
else
  aws ssm start-session --target $INSTANCEID
fi

#
#          _
#  _______| |__  _ __ ___
# |_  / __| '_ \| '__/ __|
#  / /\__ \ | | | | | (__
# /___|___/_| |_|_|  \___|
# 
#

# Soure profile
source $HOME/.profile

autoload bashcompinit
bashcompinit

if [ -f "$HOME/.config/oh-my-zsh/custom/themes/powerlevel10k/powerlevel10k.zsh-theme" ]; then
  source $HOME/.config/oh-my-zsh/custom/themes/powerlevel10k/powerlevel10k.zsh-theme
elif [ -f "/usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme" ]; then
  source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme
else
  echo "WARNING: powerlevel10k not found!"
fi

# Path to your oh-my-zsh installation.
if [ -d "$HOME/.config/oh-my-zsh" ]; then
  ZSH=$HOME/.config/oh-my-zsh/
elif [ -d "/usr/share/oh-my-zsh" ]; then
  ZSH=/usr/share/oh-my-zsh/
else
  echo "ERROR: Oh-My-Zsh not found!"
  exit 1
fi

# To customize prompt, run `p10k configure` or edit ~/.config/zsh/.p10k.zsh.
[[ -f ~/.config/zsh/.p10k.zsh ]] && source ~/.config/zsh/.p10k.zsh

# Uncomment the following line to use hyphen-insensitive completion.
HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="false"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files under VCS as dirty.
#DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time stamp shown in the history command output.
HIST_STAMPS="yyyy-mm-dd"

# Would you like to use another custom folder than $ZSH/custom?
if [ -d "$HOME/.config/oh-my-zsh/custom" ]; then
  ZSH_CUSTOM=$HOME/.config/oh-my-zsh/custom
elif [ -d "/usr/share/zsh" ]; then
  ZSH_CUSTOM=/usr/share/zsh/
else
  echo "ERROR: ZSH_CUSTOM not found!"
  exit 1
fi

# Change foreground color of the autosuggest plugin
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=7'

plugins=(adb archlinux aws catimg command-not-found common-aliases copyfile copypath docker docker-compose extract fancy-ctrl-z fd fzf gh git gpg-agent history httpie jsontools lpass nmap pass ripgrep safe-paste sublime sudo systemd terraform tmux ubuntu urltools vscode z zsh-interactive-cd zsh-autosuggestions history-substring-search zsh-syntax-highlighting)

# Autostart tmux on zsh startup
ZSH_TMUX_AUTOSTART="false"
ZSH_TMUX_CONFIG="$XDG_CONFIG_HOME/tmux/tmux.conf"

# Configure autocompletion
zstyle ':completion:*' cache-path $XDG_CACHE_HOME/zsh/zcompcache
zstyle ':completion:*' rehash true

#Setup ZSH autocompletion
fpath=(
  ~/.awsume/zsh-autocomplete
  $fpath
)

# Load the oh-my-zsh framework
source $ZSH/oh-my-zsh.sh

# Load ZSH command line edit through editor
autoload edit-command-line
zle -N edit-command-line
bindkey '^Xe' edit-command-line

# Load ZSH bulk renamer
autoload zmv

# Some bindkeys for autosuggest
bindkey '^f' autosuggest-accept
bindkey '^j' history-substring-search-down
bindkey '^k' history-substring-search-up

# Set exa aliases
alias l='exa -l'
alias la='exa -a'
alias ll='exa -lah'
alias ls='exa --color=auto'

# Set docker aliases
alias d='docker'
alias dc='docker container'
alias di='docker image'
alias dn='docker network'
alias ds='docker system'
alias dv='docker volume'

# Set tool replacement aliases
if [ -f "/usr/bin/batcat" ]; then
  alias cat='batcat'
elif [ -f "/usr/bin/bat" ]; then
  alias cat='bat'
fi

alias hex='hexyl'

# Set MISC aliases
alias rm='rm -Iv'
alias cp='cp -v'
alias mv='mv -v'
alias vim='nvim'
alias netstat='echo NETSTAT is unavailable on Arch, please use \"ss -tulpn\"'
alias lspath='for i in $(echo $PATH | sed "s/:/\ /g"); do find $i -maxdepth 1 -xtype f -executable; done | sort -u'
alias setclip='xclip -selection clipboard'
alias getclip='xclip -o -selection clipboard'
alias syncwatch='watch grep -e Dirty: -e Writeback: /proc/meminfo'
alias ripcd='abcde -d /dev/cdrom'
alias cm="chezmoi"
alias r="ranger"
alias v='vim'
alias yt="youtube-dl --add-metadata -ic"
alias yta="youtube-dl --add-metadata -xic"
alias rg="rg -S --no-ignore --hidden --glob '!{.git,node_modules,**/.terraform}/**'"
alias pdf="mupdf"
alias img='sxiv'
alias t='tmux new-session -A -s main'
alias lsmounts='mount | egrep "^/" | awk '"'"'{print $1" "$3}'"'"' | column -t | sort'

# Run specific docker containers
alias alpine='docker container run --rm -it alpine:latest /bin/sh'
alias nginx='docker container run --rm -it -v `pwd`:/usr/share/nginx/html:ro -p 80:80 nginx:latest'
alias localstack='docker container run --rm -it -e SERVICES=serverless -e DEFAULT_REGION=eu-west-1 -p 4566:4566 -p 4571:4571 localstack/localstack:latest'
alias awslocal='aws --endpoint-url=http://localhost:4566'
alias ssudo='pass linux/melvyn | sudo -SH'
alias mtn='mtn -f /usr/share/fonts/TTF/DejaVuSans.ttf'

# Set bitwarden session key
if [ -f "$HOME/.config/bw-unlock.sh" ]; then
  source "$HOME/.config/bw-unlock.sh"
fi

# Vagrant for libvirt
alias vagrant='docker run --rm -it \
  -e LIBVIRT_DEFAULT_URI \
  -v /var/run/libvirt/:/var/run/libvirt/ \
  -v ~/.vagrant.d:/.vagrant.d \
  -v "$(pwd):$(pwd)" \
  -w "$(pwd)" \
  vagrantlibvirt/vagrant-libvirt:latest \
  vagrant'

# Fun command to wait a long time
alias coffee='for i in `seq 0 100`;do timeout 6 dialog --gauge "Install..." 6 40 "$i";done'

# Upgrade to latest Terraform version
tfupdate() {
  VERSION=$(tfenv list-remote | head -n 1)
  tfenv install $VERSION
  tfenv use $VERSION
}

# Use correct TERM variable in SSH connections
ssh() {
  if [ "$TERM" = "alacritty" ]; then
    TERM=xterm-256color /usr/bin/ssh $*
  elif [ "$TERM" = "tmux-256color" ]; then
    /usr/bin/ssh $*
  else
    /usr/bin/ssh $*
  fi
}

# Generate the public key fingerpirnt
ssh-fingerprint() {
  ssh-keyscan $@ | ssh-keygen -l -E md5 -f -
}

# Generate an MFA token
mfa() {
  if pacman -qQ oath-toolkit > /dev/null; then
    if [ -f $HOME/.mfa/$1.mfa ]; then
      oathtool --base32 --totp "$(cat ~/.mfa/${1}.mfa)" ;
    else
      echo "MFA config ${1} does not exist"
    fi
  else
    sudo pacman -S oath-toolkit
  fi
}

# TMUX configuration
if [ ! -d "$XDG_CONFIG_HOME/tmux/plugins/tpm" ]; then
  git clone https://github.com/tmux-plugins/tpm $XDG_CONFIG_HOME/tmux/plugins/tpm
fi

# Configure maven
mvn-or-mvnw() {
	if [ -x ./mvnw ]; then
		echo "executing mvnw instead of mvn"
		./mvnw --global-settings $XDG_CONFIG_HOME/maven/settings.xml "$@"
	else
		command mvn --global-settings $XDG_CONFIG_HOME/maven/settings.xml "$@"
	fi
}

{{if .work }}
# Work related stuff
export ARTIFACTORY_URL="https://{{- urlquery (pass "portbase/artifactory" | b64dec | splitn ":" 2)._0 -}}:{{- urlquery (pass "portbase/artifactory" | b64dec | splitn ":" 2)._1 -}}@artifactory.portbase.io/artifactory"
alias wpcs-build="mvn -T C1 clean package -DskipTests -Dnaomi.skip -Dmaven.antrun.skip -pl \!naomi/naomi-maven-plugin-test"
alias sqlplus='docker container run --rm -it --network host melvyndekort/sqlplus'

# Set environment variables such as New Relic API keys
pbvars() {
  for KEY in $(pass portbase/env_vars | base64 -d); do
    export $KEY;
  done
}

# Clear New Relic API key environment variables
nrc() {
  for ENV in prod accept kt sc stc; do
    unset NEW_RELIC_API_KEY_${ENV}
  done
}

# Find the account id of an AWS account
acct() {
  grep -C3 $1 $HOME/.config/aws/config
}
{{- end }}

#AWSume alias to source the AWSume script
alias awsume=". awsume"

if command -v awsume-autocomplete &> /dev/null; then
  autoload -Uz bashcompinit && bashcompinit
  complete -C awsume-autocomplete awsume
fi

neofetch
